package com.example

primitive x + y: Integer -> Integer -> Integer
primitive s1 ++ s2: String -> String -> String
primitive debug x: a -> String
primitive putStrLn s: String -> ()
primitive readInteger: !Integer

earthDiameter: Decimal = 12.742e+10

movie: String = "12 Monkeys"

json: String = """{
  "title": "12 Monkeys",
  "director": "Terry Gilliam",
  "length": 129
}"""

nl: Char = '\n'

e: Char = 'e'

unit: () = ()

lift f: (a -> !b) -> !a -> !b =
  \c: !a => let !x = c in f x

ma >>= f: !a -> (a -> !b) -> !b =
  (lift f) ma

succ x: Integer -> !Integer =
  !(x + 1)

a `and` b: Boolean -> Boolean -> !Boolean =
  if a then !b else !False

a `or` b: Boolean -> Boolean -> !Boolean =
  if a then !True else !b

not b: Boolean -> !Boolean =
  if True then !False else !True

isZero x : Integer -> !Boolean =
  case x of
    zero @ 0  => !True  -- trivial binding
    (1 | 2)   => !False -- trivial alternative
    _ if True => !False -- trivial guard

main: () =
  let !x    = readInteger in
  let !zero = isZero x    in
  if zero then
    putStrLn "Entered Zero"
  else
    let !y = readInteger >>= succ in
    putStrLn ("paired: " ++ (debug (x, y)))

{-| example expressions to try:
    primitive fst p: (a, b) -> a
    primitive snd p: (a, b) -> b
    primitive x == y: a -> a -> Boolean
    (fst((0,"")), snd((0,""))) == (0,"")
-}